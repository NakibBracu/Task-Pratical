@using Task.Web.Models.DTO
@model MeetingCreateDTO
@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<form role="form" asp-antiforgery="true" asp-action="SaveMeetingDetails"
      asp-area="" asp-controller="Customer" method="post">

    <div class="card-body">
        <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-check">
        <input class="form-check-input" type="radio" name="customerType" id="corporateRadio" value="Corporate" checked>
        <label class="form-check-label" for="corporateRadio">
            Corporate
        </label>
    </div>
    <div class="form-check">
        <input class="form-check-input" type="radio" name="customerType" id="individualRadio" value="Individual">
        <label class="form-check-label" for="individualRadio">
            Individual
        </label>
    </div>

    <!-- Dropdown for CustomerName -->
    <!-- Container to hold both dropdown and MeetingAgenda input -->
    <div class="form-group mt-3">
        <div class="row" style="margin-bottom:10px">
            <!-- Dropdown for CustomerName -->
                <div class="col-md-6 d-flex align-items-center">
                    <label for="customerDropdown">Customer Name:</label>
                    <select class="form-control" id="customerDropdown" name="customerName">
                        <!-- Options will be populated dynamically using JavaScript -->
                    </select>
                    <input type="hidden" id="customerId" name="customerId">
                </div>

            <!-- Input for MeetingAgenda -->
            <div class="col-md-6 d-flex align-items-center">
                <label asp-for="MeetingAgenda" class="required" style="margin-right: 8px;">Meeting Agenda:</label>
                <div style="flex: 1;">
                    <textarea asp-for="MeetingAgenda" class="form-control overflow-auto" style="height: auto; min-height: 38px;" aria-required="true" placeholder="Meeting Agenda" required></textarea>
                </div>
                <span asp-validation-for="MeetingAgenda" class="text-danger"></span>
            </div>

        </div>

        <!--Date and Time-->
        <div class="row" style="margin-bottom:10px">
            <!-- Input for meetingDate -->
            <div class="col-md-6 d-flex align-items-center">
                <label asp-for="Date" class="required">Meeting Date:</label>
                <input asp-for="Date" class="form-control" type="date" required />
            </div>

            <!-- Input for meetingTime -->
                <div class="col-md-6 d-flex align-items-center">
                    <label asp-for="Time" class="required">Meeting Time:</label>
                    <input asp-for="Time" class="form-control" type="time" required />
                </div>


        </div>

        <!--Meeting Place and Decision-->
        <div class="row" style="margin-bottom:10px">
            <!-- Input for MeetingPlace -->
            <div class="col-md-6 d-flex align-items-center">
                <label asp-for="MeetingPlace" class="required" style="margin-right: 8px;">Meeting Place:</label>
                <div style="flex: 1;">
                    <textarea asp-for="MeetingPlace" class="form-control overflow-auto" style="height: auto; min-height: 38px;" aria-required="true" placeholder="Meeting Place" required></textarea>
                </div>
                <span asp-validation-for="MeetingPlace" class="text-danger"></span>
            </div>

            <!-- Input for MeetingDiscussion -->
            <div class="col-md-6 d-flex align-items-center">
                <label asp-for="MeetingDiscussion" class="required" style="margin-right: 8px;">Meeting Discussion:</label>
                <div style="flex: 1;">
                    <textarea asp-for="MeetingDiscussion" class="form-control overflow-auto" style="height: auto; min-height: 38px;" aria-required="true" placeholder="Meeting Discussion" required></textarea>
                </div>
                <span asp-validation-for="MeetingDiscussion" class="text-danger"></span>
            </div>

        </div>

        <!--Meeting Attendence Client Side and Decision-->
        <div class="row" style="margin-bottom:10px">
            <!-- Input for MeetingPlace -->
            <div class="col-md-6 d-flex align-items-center">
                <label asp-for="AttendsFromClientSide" class="required" style="margin-right: 8px;">Attends From Client Side:</label>
                <div style="flex: 1;">
                    <textarea asp-for="AttendsFromClientSide" class="form-control overflow-auto" style="height: auto; min-height: 38px;" aria-required="true" placeholder="Present Client Side" required></textarea>
                </div>
                <span asp-validation-for="AttendsFromClientSide" class="text-danger"></span>
            </div>

            <!-- Input for MeetingDecision -->
            <div class="col-md-6 d-flex align-items-center">
                <label asp-for="MeetingDecision" class="required" style="margin-right: 8px;">Meeting Decision:</label>
                <div style="flex: 1;">
                    <textarea asp-for="MeetingDecision" class="form-control overflow-auto" style="height: auto; min-height: 38px;" aria-required="true" placeholder="Meeting decision" required></textarea>
                </div>
                <span asp-validation-for="MeetingDecision" class="text-danger"></span>
            </div>

        </div>

        <div class="row" style="margin-bottom:10px">
            <!-- Input for AttendsFromHosTside -->
            <div class="col-md-6 d-flex align-items-center">
                <label asp-for="AttendsFromHostSide" class="required" style="margin-right: 8px;">Attends From Host Side:</label>
                <div style="flex: 1;">
                    <textarea asp-for="AttendsFromHostSide" class="form-control overflow-auto" style="height: auto; min-height: 38px;" aria-required="true" placeholder="Present self side" required></textarea>
                </div>
                <span asp-validation-for="AttendsFromHostSide" class="text-danger"></span>
            </div>

        </div>


            <div class="border p-3">
                <!-- Dropdown for Product_Or_Service -->
                <div class="col-md-6 d-flex align-items-center">
                    <label for="productorServiceDropdown">Interested Product/Service:</label>
                    <select class="form-control" id="productorServiceDropdown" name="productName">
                        <!-- Options will be populated dynamically using JavaScript -->
                    </select>
                    <input type="hidden" id="productId" name="productId">
                </div>

           <div class="row" style="margin-bottom:10px">

                    <!-- Quantity input -->
                    <div class="col-md-6 d-flex align-items-center mt-3">
                        <label for="quantityField" style="margin-right: 8px;">Quantity:</label>
                        <input type="text" class="form-control" id="quantityField" pattern="[0-9]*" title="Please enter only numeric values">
                    </div>



                <!-- Display unit -->
                <div class="col-md-6 d-flex align-items-center">
                        <label for="unitField" style="margin-right: 8px;">Unit:</label>
                    <input type="text" class="form-control" id="unitField" readonly>
                </div>


           </div>

           <!--Add Button-->
                <div>
                    <button id="addButton" type="button" class="btn btn-secondary" onclick="BtnAdd()">
                        <i class="bi bi-plus"></i> + Add
                    </button>
                </div>

  </div>

            <div class="container mt-5">
                <table class="table table-bordered">
                    <thead class="table-success">
                        <tr>
                            <th scope="col">SL#</th>
                            <th scope="col">Interested Product/Service Name</th>
                            <th scope="col" class="text-end">Quantity</th>
                            <th scope="col" class="text-end">Unit</th>
                            <th scope="col" class="text-center">Edit</th>
                            <th scope="col" class="text-center">Delete</th>
                        </tr>
                    </thead>
                    <tbody id="TBody">
                        <!-- Template row -->
                        <tr id="TRow" class="d-none">
                            <th scope="row" class="sl-no">1</th>
                            <td><input type="text" class="form-control" name="productName" readonly></td>
                            <td><input type="number" class="form-control text-end" name="qty" readonly></td>
                            <td><input type="text" class="form-control text-end" name="unit" readonly></td>
                            <td class="NoPrint text-center">
                                <button type="button" class="btn btn-sm btn-secondary" onclick="BtnEdit(this)">Edit</button>
                            </td>
                            <td class="NoPrint text-center">
                                <button type="button" class="btn btn-sm btn-danger" onclick="BtnDel(this)">X</button>
                            </td>
                        </tr>
                    </tbody>
                </table>

            </div>

    
    <div class="card-footer">
        <button type="submit" class="btn btn-primary">Save</button>
    </div>

       
   
</form>

@section Scripts {
   
   
    <script>
        function loadCustomerNames() {
            var customerType = document.querySelector('input[name="customerType"]:checked').value;
            var customerDropdown = document.getElementById("customerDropdown");
            customerDropdown.innerHTML = ""; // Clear existing options

            // Make an AJAX request to fetch customer names based on the selected radio button
            fetch(`/Customer/GetCustomerNames?customerType=${customerType}`)
                .then(response => response.json())
                .then(data => {
                    data.forEach(customer => {
                        var option = document.createElement("option");
                        option.text = customer[1]; // Accessing the name from the tuple
                        option.value = customer[0]; // Accessing the ID from the tuple
                        customerDropdown.add(option);
                    });
                })
                .catch(error => console.error('Error fetching customer names:', error));
        }

        // Event listener to trigger loadCustomerNames function when radio buttons are changed
        document.querySelectorAll('input[name="customerType"]').forEach(radio => {
            radio.addEventListener("change", loadCustomerNames);
        });

        // Event listener to set customerId when a customer is selected
        document.getElementById("customerDropdown").addEventListener("change", function () {
            var selectedCustomerId = this.value;
            // console.log('Selected Customer ID:', selectedCustomerId); // Debugging: Log the selected customer ID
            document.getElementById("customerId").value = selectedCustomerId;
        });

        // Initially load customer names based on the default selected radio button
        loadCustomerNames();

        <!-- #product_Load -->

            $(document).ready(function () {
                // Define a variable to store the data
                var productData;

                // Function to populate the dropdown and unit field
                function populateDropdown() {
                    $.ajax({
                        url: '/Customer/GetProductorServices', // Adjust the URL based on your routing configuration
                        type: 'GET',
                        success: function (data) {
                            console.log(data);
                            productData = data; // Store the data for later use
                            var dropdown = $('#productorServiceDropdown');
                            dropdown.empty(); // Clear any existing options

                            $.each(data, function (index, item) {
                                dropdown.append(
                                    $('<option></option>').val(item.item1).text(item.item2) // Display product name in dropdown
                                );
                            });

                            // Trigger change event to update the unit field with the first option's unit
                            dropdown.trigger('change');
                        },
                        error: function (error) {
                            console.error('Error fetching product or service names:', error);
                        }
                    });
                }

                // Call the function to populate the dropdown and unit field on page load
                populateDropdown();

                // Optional: Handle selection change to update the hidden input and unit field
                $('#productorServiceDropdown').change(function () {
                    var selectedOption = $(this).val();
                    $('#productId').val(selectedOption);

                    // Find the selected item's unit from the stored data using productId
                    var selectedUnit;
                    if (productData) {
                        $.each(productData, function (index, item) {
                            if (item.item1 === selectedOption) {
                                selectedUnit = item.item3;
                                return false; // Exit loop once the unit is found
                            }
                        });
                    }

                    // Update the unit field with the selected item's unit value
                    $('#unitField').val(selectedUnit || ''); // Use empty string if unit is not found
                });
            });


        <!-- #endregion -->


            let meetingDetailsArray = []; // Global variable to store meeting details
           

            <!--Table Manipulation-->
                let rowCount = 0;

        function BtnAdd() {
            rowCount++;

            const productDropdown = document.getElementById('productorServiceDropdown');
            const selectedProductName = productDropdown.options[productDropdown.selectedIndex].text;
            const selectedProductId = productDropdown.value;
            const quantity = document.getElementById('quantityField').value;
            const unit = document.getElementById('unitField').value;

            const meetingDetails = {
                ProductServiceId: selectedProductId,
                Quantity: quantity
            };

            // Store the meeting details in the global array
            meetingDetailsArray.push(meetingDetails);

            const tbody = document.getElementById('TBody');
            const templateRow = document.getElementById('TRow');
            const newRow = templateRow.cloneNode(true);

            newRow.classList.remove('d-none');
            newRow.id = '';
            newRow.querySelector('.sl-no').innerText = rowCount;
            newRow.querySelector('input[name="productName"]').value = selectedProductName;
            newRow.querySelector('input[name="qty"]').value = quantity;
            newRow.querySelector('input[name="unit"]').value = unit;

            tbody.appendChild(newRow);

            document.getElementById('quantityField').value = '';
            document.getElementById('unitField').value = '';
        }


        function BtnDel(button) {
            const row = button.closest('tr');
            row.remove();
            rowCount--;
            updateSLNo();
        }

        function updateSLNo() {
            const rows = document.querySelectorAll('#TBody tr:not(.d-none)');
            rows.forEach((row, index) => {
                row.querySelector('.sl-no').innerText = index + 1;
            });
        }

        function BtnEdit(button) {
            const row = button.closest('tr');
            const qtyInput = row.querySelector('input[name="qty"]');
            if (qtyInput.readOnly) {
                qtyInput.readOnly = false;
                button.innerText = 'Save';
            } else {
                qtyInput.readOnly = true;
                button.innerText = 'Edit';
            }
        }

        function Calc(input) {
            // Calculation logic can be added here if needed
        }

                <!--Table Manipulation-- >

                <!--Form-Submission-Handle-->

            // // Handle form submission event
            // document.querySelector('form').addEventListener('submit', function (event) {
            //     event.preventDefault(); // Prevent default form submission

            //     // Construct the meeting details JSON object
            //     const meetingCreateDTO = {
            //         CustomerId: document.getElementById('customerId').value,
            //         Date: document.getElementById('Date').value,
            //         Time: document.getElementById('Time').value,
            //         MeetingPlace: document.getElementById('MeetingPlace').value,
            //         MeetingAgenda: document.getElementById('MeetingAgenda').value,
            //         MeetingDiscussion: document.getElementById('MeetingDiscussion').value,
            //         AttendsFromClientSide: document.getElementById('AttendsFromClientSide').value,
            //         AttendsFromHostSide: document.getElementById('AttendsFromHostSide').value,
            //         MeetingDecision: document.getElementById('MeetingDecision').value,
            //         meetingProductCreateDTOs: meetingDetailsArray
            //     };

            //     // Convert the meeting details object to JSON
            //     const meetingJSON = JSON.stringify(meetingCreateDTO);

            //     // Make a POST request to your server endpoint
            //     fetch('/Meeting/AddMeeting', {
            //         method: 'POST',
            //         headers: {
            //             'Content-Type': 'application/json'
            //         },
            //         body: meetingJSON
            //     })
            //         .then(response => {
            //             if (response.ok) {
            //                 // Handle successful response
            //             } else {
            //                 throw new Error('Failed to save meeting details');
            //             }
            //         })
            //         .catch(error => {
            //             console.error('Error saving meeting details:', error);
            //         });
            // });

            <!--Form - Submission - Handle-- >


    </script>
}
